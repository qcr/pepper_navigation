/*
This file is part of the BIAS library (Basic ImageAlgorithmS).

Copyright (C) 2003-2009    (see file CONTACT for details)
  Multimediale Systeme der Informationsverarbeitung
  Institut fuer Informatik
  Christian-Albrechts-Universitaet Kiel


BIAS is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 2.1 of the License, or
(at your option) any later version.

BIAS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with BIAS; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/


#ifndef __FilterNToN_hh__
#define __FilterNToN_hh__

#include "FilterBase.hh"


namespace BIAS 
{
  /** @class FilterNToN
      @ingroup g_filter
      @brief base class for simple n->n filter implementations
      
      This is the base class for n->n filters, i.e. for every input channel 
      a single output channel is generated by filters derived from this class.

      @author koeser, skoglund, woelk 11/2004 */
  template <class InputStorageType, class OutputStorageType>
  class BIASFilter_EXPORT FilterNToN : 
    public FilterBase<InputStorageType, OutputStorageType>
  {
  public:
    FilterNToN();
    FilterNToN(const FilterNToN<InputStorageType, OutputStorageType>& other);
    virtual ~FilterNToN(){};
    
    /** virtual function for interface definition */
    virtual int Filter(const Image<InputStorageType>& src, 
                       Image<OutputStorageType>& dst) = 0;

    virtual int FilterInt(const Image<InputStorageType>& src, 
                          Image<OutputStorageType>& dst) = 0;

    virtual int FilterFloat(const Image<InputStorageType>& src, 
                            Image<OutputStorageType>& dst) = 0;

    virtual FilterNToN<InputStorageType, OutputStorageType>* Clone() const = 0;
  }; // class
} // namespace

#endif // __FilterNToN_hh__
